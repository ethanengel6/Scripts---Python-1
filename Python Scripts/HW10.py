# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N1vL2n_qarY0CvV13br7iML9yVYTUjCC

1. Write a recursive function, called recFactorial, that takes an integer x as argument and returns the x! (x factorial). (10 points)  For example : 5! = 5*4*3*2*1
"""

def recFactorial(x):
  """
  Arg: x (int)
  return: x factorial; x * all of the positive integers that precede it"""
  if x>1:
    return x*recFactorial(x-1)
  else:
    return x
  
recFactorial(5)

"""2) Write a recursive function, called dogLegs, that takes number of dogs as argument and returns the number of dog legs (assume each dog has 4 legs). (20 points)"""

def dogLegs(dawgs):
  """
  Arg: dawgs(int)
  Returns: 4* the # of dawgs, using repeated addition"""
  if dawgs>0:
    return 4 +dogLegs(dawgs-1)
  else:
    return dawgs
dogLegs(98)

"""3. A triangle is made of blocks and each row has one more block than the one below it so the ﬁrst row from the top has 1 block, then 2 blocks below that, then 3 blocks below that…etc. Write a recursive function, called numBlocks, that counts the number of blocks in a triangle of height h and returns it. (15 points)"""

def numBlocks(h):
  """
  Arg: h(int)
  Returns: h + all of the positive integers that precede it"""
  
  if h>1:
    return h + numBlocks(h-1)
  else:
    return h
numBlocks(7)

"""4. Write a recursive function, called containsTarget, that takes a list and a target value and returns true if the list contains the target value or false otherwise. (10 points)"""

def containsTarget(tList,tValue):
  """
  Arg: tList(list) & tValue(int)
  Returns: True if the list contains the tValue int; False otherwise"""
  
  if len(tList)==0:
    return False
  if tList[0]==tValue:
    return True
  return containsTarget(tList[1:],tValue)
containsTarget([1,2,3,4,5,6,7,8,9],20)

"""5. Write a recursive function, called countTarget, that takes a list of values and a target value and returns the number of times target appears in list. For example if the target is 4 and the list is [1, 3, 5, 4, 2, 4] then the function returns 2. (15 points"""

def countTarget(tCountList,tCountValue):
  """
  Args: tCountList(list) & tCountValue(int)
  Returns: # of occurrences of tCountValue in tCountList"""
  if len(tCountList)==0:
    return 0
  if tCountList[0]==tCountValue:
    return 1 + countTarget(tCountList[1:],tCountValue)
  else:
    return 0 + countTarget(tCountList[1:],tCountValue)
countTarget([1,2,3,4,5,7,7,7,7,7,7,7,6,5,4,3,7,8,7,9],7)

"""6. Write a recursive function, called countZZ, that takes a string as an argument and computes the number of times lowercase "ZZ" appears in the string. (10 points)  For example "hellozz Worzzld" would return 2 and “hellozzz Worzzzld” would also return 2."""

def countZZ(zzString):
  """
  Arg: zzString(string)
  Returns: # of occurrences of non-overlapping double z's in the string"""
  if len(zzString)<=1:
    return 0
  if zzString[0]=="z" and zzString[1]=="z":
    return 1 + countZZ(zzString[2:])
  else:
    return 0 + countZZ(zzString[1:])
countZZ("zzzztop live in zz Brazzaville.zzzzzzz")

"""7. Write a recursive function, elimDuplicates, that takes a string as an argument and returns a new string with all adjacent duplicate characters (a character followed by the same character) removed. (20 points)  For example "hello" will become "helo" and "wohooo" will become "woho""""

def elimDuplicates(deadStringWalking):
  """
  Arg: deadStringWalking(string)
  Returns: the string with any consecutive duplicate letters reduced to one"""
  if len(deadStringWalking)==1:
    return deadStringWalking[-1]
  if deadStringWalking[0]==deadStringWalking[1]:
    return deadStringWalking[0]+elimDuplicates(deadStringWalking[2:])
  else:
    return deadStringWalking[0]+elimDuplicates(deadStringWalking[1:])
elimDuplicates("llama bookkeeper")