# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ugYRSnS6Ijo-7eRgNblATARxey0SMvlD

1. Create a function, called setComp, that uses Python set comprehension to generate a set
of pair tuples consisting of all of the integers between 1 and 10,000 and the square of that
number but only if the square is divisible by 3 and return that set. (20 points)
For example (3, 9) would be in the set since 3^2 is 9 and 9 is divisible by 3.
"""

def setComp():
  """
  No Args
  returns:squareSet(set)  all squares of integers from 1-10000 that are divisible by 3"""
  squaresSet={(q,q**2) for q in range (3,10000,3)}
  return (squaresSet)
setComp()

"""2. Write a function, called minMaxSet, that takes a set of numbers and returns the minimum
and maximum value in the set. Cannot use the built-in functions min()/max(). (20 points)
"""

def minMaxSet(numberSet):
  """
  Arg:numberSet(set)
  set of values from which min & max will be found

  Returns:extremes(set)
  minimum & maximum values from the original set"""
  
  numberList=list(numberSet)
  Largest=numberList[0]
  Smallest=numberList[0]
    #Loop to find the list max
  for q in range(len(numberList)-1):
      if numberList[q+1]>Largest:
        Largest=numberList[q+1]
    #Loop to find the list minimum
  for z in range(len(numberList)-1):
      if numberList[z+1]<Smallest:
            Smallest=numberList[z+1]   
  extremes={Smallest,Largest}
  return(extremes)
minMaxSet({1,2,3,4,5,62,9,4,-4,3,2,6,5})

"""3. Write a function, uniqueElems, that given a list of values, determines if all elements are
unique (no repeated values). (20 points)
You must use a set to perform this task.
"""

def uniqueElems(valueList):
  """
  Arg:valueList(list)
  list of values which we are testing to see if all elements are unique

  Returns: True if all elements are unique; False if there are any duplicate values."""
  
  valueSet=set(valueList)
  if len(valueSet)==len(valueList):
    print("All elements in the list are unique")
    return True
  else:
    print("There are duplicates in this list")
    return False
uniqueElems([1,3,9,4,6,7,38,0])

"""4. Write a function, called commonElems, that takes two sets, A and B, and returns a new
frozen set containing elements that are in either A or B but NOT in the intersection of A and
B. (20 points)
"""

def commonElems(A,B):
  """
  Args: A(set) and B(set)
  Returns: setDiff(frozenset)
  The union of sets A&B minus the intersection"""
  
  setDiff=frozenset((A|B)-(A&B))
  return (setDiff)
commonElems({3,4,5,6,7,8,9},{4,1,6,7,9,12,0,99,6})

"""5. Write a function, called addsToK, that given an integer k and a list of n unordered integers
A, determines if there is a pair of integers in A that add up to k. (20 points)
You must perform this task using sets.
"""

def addsToK(k,intList):
  """
  Args: k(int) and intList(list)
  returns: true if there is a pair of integers in the list that add up to k; False otherwise"""
  
  intSet=set(intList)
  for zz in range(min(intSet),max(intSet)+1):
    if (zz in intSet) and ((k-zz) in intSet) and zz!=(k-zz):
      print ("There are a pair in the set that add up to",k,".")
      return True
  print("There are no integer pairs that add up to",k)
  return False
  
addsToK(-212,[-223,-488,2,6,17,8,9,-5])

